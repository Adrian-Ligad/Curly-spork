type Organization {
  id: ID!
  name: String!
  slug: String!
  users: [User!]!
  roles: [Role!]!
  shifts: [Shift!]!
  createdAt: String!
  updatedAt: String!
}

type Role {
  id: ID!
  name: String!
  description: String
  wage: Float!
  metadata: JSON
  organization: Organization!
  users: [User!]!
  createdAt: String!
  updatedAt: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type User {
  id: ID!
  email: String!
  auth0Id: String!
  firstName: String!
  lastName: String!
  isActive: Boolean!
  isAdmin: Boolean!
  permissions: [String!]!
  organization: Organization!
  role: Role
  shifts: [Shift!]!
  createdAt: String!
  updatedAt: String!
}

type Shift {
  id: ID!
  startTime: String!
  endTime: String!
  user: User
  organization: Organization!
  createdAt: String!
  updatedAt: String!
}

input CreateOrganizationInput {
  name: String!
  slug: String!
}

input CreateRoleInput {
  name: String!
  description: String
  wage: Float!
  metadata: JSON
  orgId: ID!
}

input UpdateRoleInput {
  name: String
  description: String
  wage: Float
  metadata: JSON
}

input CreateUserInput {
  email: String!
  auth0Id: String!
  firstName: String!
  lastName: String!
  roleId: ID
  orgId: ID!
  isAdmin: Boolean
  permissions: [String!]
}

input UpdateUserInput {
  firstName: String
  lastName: String
  roleId: ID
  isActive: Boolean
  isAdmin: Boolean
  permissions: [String!]
}

input CreateShiftInput {
  startTime: String!
  endTime: String!
  userId: ID
  orgId: ID!
}

type Query {
  organizations: [Organization!]!
  organization(id: ID!): Organization
  myOrganization: Organization
  roles(organizationId: ID!): [Role!]!
  role(id: ID!): Role
  users(organizationId: ID!): [User!]!
  user(id: ID!): User
  me: User
  shifts(organizationId: ID!): [Shift!]!
  shift(id: ID!): Shift
}

type Mutation {
  createOrganization(input: CreateOrganizationInput!): Organization!
  updateOrganization(id: ID!, input: CreateOrganizationInput!): Organization!
  createRole(input: CreateRoleInput!): Role!
  updateRole(id: ID!, input: UpdateRoleInput!): Role!
  deleteRole(id: ID!): Role!
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  createShift(input: CreateShiftInput!): Shift!
  updateShift(id: ID!, input: CreateShiftInput!): Shift!
  deleteShift(id: ID!): Shift!
}