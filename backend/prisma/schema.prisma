datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  roles       Role[]
  shifts      Shift[]
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  auth0Id       String    @unique
  passwordHash  String?
  firstName     String
  lastName      String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  role          Role?       @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId        String?
  shifts        Shift[]
  sessions      Session[]
  
  // Permissions
  isAdmin       Boolean   @default(false)
  permissions   String[]  @default([])

  @@index([email])
  @@index([auth0Id])
}

model Role {
  id            String    @id @default(uuid())
  name          String
  description   String?
  wage          Float
  metadata      Json?
  lastUpdated   DateTime  @updatedAt
  createdAt     DateTime  @default(now())

  // Relations
  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  users         User[]

  @@unique([name, orgId])
}

model Shift {
  id            String    @id @default(uuid())
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?

  @@index([startTime, endTime])
}

model Session {
  id            String    @id @default(uuid())
  token         String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@index([token])
}